import { useState } from "react";
import { Eye, Edit, Trash2, Send, Clock, CheckCircle, AlertCircle } from "lucide-react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";

const mockArticles = [
  {
    id: 1,
    title: "OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç GPT-5 —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
    source: "TechCrunch",
    status: "new",
    timestamp: "5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
    content: "OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª GPT-5, –æ—Ç–º–µ—á–∞—é—â–∏–π –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ä—ã–≤ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ..."
  },
  {
    id: 2,
    title: "–ù–æ–≤—ã–µ AR-–æ—á–∫–∏ Meta –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Ä—ã–Ω–æ–∫",
    source: "The Verge",
    status: "new", 
    timestamp: "12 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
    content: "Meta –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∞ —Å–≤–æ–∏ –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—ã–µ AR-–æ—á–∫–∏, –æ–±–µ—â–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å..."
  }
];

const mockPosts = [
  {
    id: 1,
    title: "ü§ñ –ü—Ä–æ—Ä—ã–≤ –≤ –ò–ò: –Ω–æ–≤–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    content: `–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ò–ò, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.

–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤:
‚Ä¢ –°–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è (+40% —Ç–æ—á–Ω–æ—Å—Ç–∏)
‚Ä¢ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏ (95+ —è–∑—ã–∫–æ–≤)
‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–∏ –∏ –æ—Ç–ª–∞–¥–∫–µ –∫–æ–¥–∞

–≠—Ç–æ—Ç –ø—Ä–æ—Ä—ã–≤ –º–æ–∂–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ä–∞—Å–ª–∏ –æ—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–æ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –æ—Ç–∫—Ä—ã–≤–∞—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ò–ò.

#AI #MachineLearning #–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏`,
    source: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ò–ò",
    status: "draft",
    timestamp: "30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
    scheduledFor: "–°–µ–≥–æ–¥–Ω—è, 14:00",
    image: "https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=400&q=80"
  },
  {
    id: 2, 
    title: "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: –º–∏—Å—Å–∏—è –Ω–∞ –ú–∞—Ä—Å –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è",
    content: `–°—Ä–æ—á–Ω–æ: NASA –æ–±—ä—è–≤–ª—è–µ—Ç –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ $2.5 –º–ª—Ä–¥ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –º–∏—Å—Å–∏–∏ –Ω–∞ –ú–∞—Ä—Å, —É—Å–∫–æ—Ä—è—è –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ 18 –º–µ—Å—è—Ü–µ–≤.

–ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
‚Ä¢ –ü–µ—Ä–µ–¥–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–≤–∏–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
‚Ä¢ –ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∂–∏–∑–Ω–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã
‚Ä¢ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —É–∫—Ä–µ–ø–ª–µ–Ω—ã
‚Ä¢ –û—Ç–±–æ—Ä —ç–∫–∏–ø–∞–∂–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ

–≠—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –º–∏—Å—Å–∏—è –Ω–∞—Ü–µ–ª–µ–Ω–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ –ú–∞—Ä—Å–µ –∫ 2030 –≥–æ–¥—É.

#–ö–æ—Å–º–æ—Å #–ú–∞—Ä—Å #NASA #–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è #–ë—É–¥—É—â–µ–µ`,
    source: "–°–µ—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
    status: "draft",
    timestamp: "1 —á–∞—Å –Ω–∞–∑–∞–¥",
    scheduledFor: "–ó–∞–≤—Ç—Ä–∞, 09:00",
    image: "https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?w=400&q=80"
  }
];

const publishedPosts = [
  {
    id: 1,
    title: "üî¨ –í–µ—Ö–∞ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç 1000-–∫—É–±–∏—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä",
    publishedAt: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
    engagement: { views: 1250, likes: 89, shares: 23 }
  },
  {
    id: 2,
    title: "üå± –†–µ–≤–æ–ª—é—Ü–∏—è –∑–µ–ª–µ–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –ø—Ä–µ–æ–¥–æ–ª–µ–ª–∞ 30% –±–∞—Ä—å–µ—Ä",
    publishedAt: "6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥", 
    engagement: { views: 2100, likes: 156, shares: 45 }
  }
];

function PostPreviewDialog({ post, open, onClose }: { 
  post: any; 
  open: boolean; 
  onClose: () => void; 
}) {
  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
      <DialogHeader>
        <DialogTitle>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞</DialogTitle>
        <DialogDescription>
          –¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–æ—Å—Ç –≤ Telegram
        </DialogDescription>
      </DialogHeader>
        
        <div className="bg-secondary/20 rounded-lg p-4 space-y-3 max-h-96 overflow-y-auto">
          {post?.image && (
            <img 
              src={post.image} 
              alt="Post image"
              className="w-full h-32 object-cover rounded-lg"
            />
          )}
          
          <div className="space-y-2">
            <h3 className="font-bold text-lg">{post?.title}</h3>
            <div className="whitespace-pre-wrap text-sm leading-relaxed">
              {post?.content}
            </div>
          </div>
          
          <div className="flex items-center justify-between text-xs text-muted-foreground pt-2 border-t border-border/50">
            <span>–ö–∞–Ω–∞–ª AI –ù–æ–≤–æ—Å—Ç–µ–π</span>
            <span>{post?.scheduledFor}</span>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

function KanbanColumn({ 
  title, 
  items, 
  status, 
  badge,
  children 
}: { 
  title: string; 
  items: any[];
  status: string;
  badge?: string;
  children: React.ReactNode;
}) {
  return (
    <Card className="gradient-card border-border/50 flex-1">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="text-lg">{title}</CardTitle>
          {badge && <Badge variant="outline">{badge}</Badge>}
        </div>
      </CardHeader>
      <CardContent className="space-y-3">
        {children}
      </CardContent>
    </Card>
  );
}

export default function Content() {
  const [previewPost, setPreviewPost] = useState(null);
  const [previewOpen, setPreviewOpen] = useState(false);

  const handlePreview = (post: any) => {
    setPreviewPost(post);
    setPreviewOpen(true);
  };

  const handlePublish = (id: number) => {
    console.log("Publishing post", id);
    // In real app, this would call the API
  };

  const handleEdit = (post: any) => {
    console.log("Editing post", post.id);
    // In real app, this would open an edit dialog
  };

  const handleDelete = (id: number) => {
    console.log("Deleting post", id);
    // In real app, this would call the API
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">–ö–æ–Ω–≤–µ–π–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h1>
          <p className="text-muted-foreground">
            –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –æ—Ç —Å—ã—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.
          </p>
        </div>
        <Button className="gradient-primary shadow-glow">
          <Send className="w-4 h-4 mr-2" />
          –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞—Ç—å–∏
        </Button>
      </div>

      {/* Pipeline Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="gradient-card border-border/50">
          <CardContent className="p-4">
            <div className="text-2xl font-bold">{mockArticles.length}</div>
            <p className="text-sm text-muted-foreground">–ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π</p>
          </CardContent>
        </Card>
        <Card className="gradient-card border-border/50">
          <CardContent className="p-4">
            <div className="text-2xl font-bold">{mockPosts.length}</div>
            <p className="text-sm text-muted-foreground">–ì–æ—Ç–æ–≤—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</p>
          </CardContent>
        </Card>
        <Card className="gradient-card border-border/50">
          <CardContent className="p-4">
            <div className="text-2xl font-bold">{publishedPosts.length}</div>
            <p className="text-sm text-muted-foreground">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è</p>
          </CardContent>
        </Card>
        <Card className="gradient-card border-border/50">
          <CardContent className="p-4">
            <div className="text-2xl font-bold">94%</div>
            <p className="text-sm text-muted-foreground">–£—Å–ø–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏</p>
          </CardContent>
        </Card>
      </div>

      {/* Kanban Board */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 min-h-[600px]">
        {/* New Articles Column */}
        <KanbanColumn 
          title="–ù–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏" 
          items={mockArticles}
          status="new"
          badge={`${mockArticles.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`}
        >
          {mockArticles.map((article) => (
            <div 
              key={article.id}
              className="p-3 bg-secondary/30 rounded-lg hover:bg-secondary/50 transition-smooth cursor-pointer"
            >
              <div className="flex items-start justify-between mb-2">
                <Badge variant="outline" className="text-xs">
                  <AlertCircle className="w-3 h-3 mr-1" />
                  –ù–æ–≤–∞—è
                </Badge>
                <span className="text-xs text-muted-foreground">{article.timestamp}</span>
              </div>
              <h4 className="font-medium text-sm mb-2 line-clamp-2">{article.title}</h4>
              <p className="text-xs text-muted-foreground mb-2 line-clamp-2">
                {article.content}
              </p>
              <div className="flex items-center justify-between">
                <span className="text-xs text-muted-foreground">{article.source}</span>
                <div className="flex space-x-1">
                  <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                    <Eye className="w-3 h-3" />
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </KanbanColumn>

        {/* Ready to Publish Column */}
        <KanbanColumn 
          title="–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" 
          items={mockPosts}
          status="draft"
          badge={`${mockPosts.length} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤`}
        >
          {mockPosts.map((post) => (
            <div 
              key={post.id}
              className="p-4 bg-secondary/30 rounded-lg hover:bg-secondary/50 transition-smooth"
            >
              <div className="flex items-start justify-between mb-2">
                <Badge variant="outline" className="text-xs">
                  <Clock className="w-3 h-3 mr-1" />
                  –ß–µ—Ä–Ω–æ–≤–∏–∫
                </Badge>
                <span className="text-xs text-muted-foreground">{post.timestamp}</span>
              </div>
              
              {post.image && (
                <img 
                  src={post.image} 
                  alt="Post preview"
                  className="w-full h-20 object-cover rounded mb-3"
                />
              )}
              
              <h4 className="font-medium text-sm mb-2 line-clamp-2">{post.title}</h4>
              <p className="text-xs text-muted-foreground mb-3">
                –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {post.scheduledFor}
              </p>
              
              <div className="flex space-x-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => handlePreview(post)}
                  className="flex-1 h-7 text-xs"
                >
                  <Eye className="w-3 h-3 mr-1" />
                  –ü—Ä–æ—Å–º–æ—Ç—Ä
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleEdit(post)}
                  className="h-7 w-7 p-0"
                >
                  <Edit className="w-3 h-3" />
                </Button>
                <Button 
                  size="sm"
                  onClick={() => handlePublish(post.id)}
                  className="gradient-primary h-7 px-2 text-xs"
                >
                  <Send className="w-3 h-3 mr-1" />
                  –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                </Button>
              </div>
            </div>
          ))}
        </KanbanColumn>

        {/* Published Column */}
        <KanbanColumn 
          title="–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" 
          items={publishedPosts}
          status="published"
          badge={`${publishedPosts.length} —Å–µ–≥–æ–¥–Ω—è`}
        >
          {publishedPosts.map((post) => (
            <div 
              key={post.id}
              className="p-3 bg-secondary/30 rounded-lg hover:bg-secondary/50 transition-smooth"
            >
              <div className="flex items-start justify-between mb-2">
                <Badge variant="outline" className="text-xs">
                  <CheckCircle className="w-3 h-3 mr-1" />
                  –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
                </Badge>
                <span className="text-xs text-muted-foreground">{post.publishedAt}</span>
              </div>
              <h4 className="font-medium text-sm mb-3 line-clamp-2">{post.title}</h4>
              
              <div className="space-y-2 text-xs text-muted-foreground">
                <div className="flex justify-between">
                  <span>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</span>
                  <span>{post.engagement.views.toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span>–õ–∞–π–∫–∏</span>
                  <span>{post.engagement.likes}</span>
                </div>
                <div className="flex justify-between">
                  <span>–†–µ–ø–æ—Å—Ç—ã</span>
                  <span>{post.engagement.shares}</span>
                </div>
              </div>
            </div>
          ))}
        </KanbanColumn>
      </div>

      <PostPreviewDialog
        post={previewPost}
        open={previewOpen}
        onClose={() => setPreviewOpen(false)}
      />
    </div>
  );
}